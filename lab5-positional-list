import java.util.Iterator;
import java.util.NoSuchElementException;

// LinkedPositionalList Implementation
class LinkedPositionalList<E> implements Iterable<E> {

    // ---------------- Nested Node Class ----------------
    private static class Node<E> implements Position<E> {
        private E element;
        private Node<E> prev;
        private Node<E> next;

        public Node(E e, Node<E> p, Node<E> n) {
            element = e;
            prev = p;
            next = n;
        }

        public E getElement() { return element; }
        public Node<E> getPrev() { return prev; }
        public Node<E> getNext() { return next; }
        public void setElement(E e) { element = e; }
        public void setPrev(Node<E> p) { prev = p; }
        public void setNext(Node<E> n) { next = n; }
    }

    // ---------------- Position Interface ----------------
    public interface Position<E> {
        E getElement();
    }

    // ---------------- Instance Variables ----------------
    private final Node<E> header;
    private final Node<E> trailer;
    private int size = 0;

    // ---------------- Constructor ----------------
    public LinkedPositionalList() {
        header = new Node<>(null, null, null);
        trailer = new Node<>(null, header, null);
        header.setNext(trailer);
    }

    // ---------------- Utility Methods ----------------
    private Node<E> validate(Position<E> p) {
        if (!(p instanceof Node<E> node)) throw new IllegalArgumentException("Invalid position");
        if (node.getNext() == null) throw new IllegalArgumentException("Position no longer in list");
        return node;
    }

    private Position<E> position(Node<E> node) {
        if (node == header || node == trailer) return null;
        return node;
    }

    // ---------------- Access Methods ----------------
    public int size() { return size; }
    public boolean isEmpty() { return size == 0; }

    public Position<E> first() { return position(header.getNext()); }
    public Position<E> last() { return position(trailer.getPrev()); }
    public Position<E> before(Position<E> p) { return position(validate(p).getPrev()); }
    public Position<E> after(Position<E> p) { return position(validate(p).getNext()); }

    // ---------------- Update Methods ----------------
    private Position<E> addBetween(E e, Node<E> pred, Node<E> succ) {
        Node<E> newest = new Node<>(e, pred, succ);
        pred.setNext(newest);
        succ.setPrev(newest);
        size++;
        return newest;
    }

    public Position<E> addFirst(E e) { return addBetween(e, header, header.getNext()); }
    public Position<E> addLast(E e) { return addBetween(e, trailer.getPrev(), trailer); }
    public void addBefore(Position<E> p, E e) {
        Node<E> node = validate(p);
        addBetween(e, node.getPrev(), node);
    }
    public void addAfter(Position<E> p, E e) {
        Node<E> node = validate(p);
        addBetween(e, node, node.getNext());
    }

    public E set(Position<E> p, E e) {
        Node<E> node = validate(p);
        E old = node.getElement();
        node.setElement(e);
        return old;
    }

    public E remove(Position<E> p) {
        Node<E> node = validate(p);
        Node<E> pred = node.getPrev();
        Node<E> succ = node.getNext();
        pred.setNext(succ);
        succ.setPrev(pred);
        size--;
        E old = node.getElement();
        node.setElement(null);
        node.setNext(null);
        node.setPrev(null);
        return old;
    }

    // ---------------- Iterator ----------------
    private class PositionIterator implements Iterator<E> {
        private Node<E> cursor = header.getNext(); // next to return
        private Node<E> recent = null;             // last returned
        private boolean canRemove = false;

        public boolean hasNext() {
            return cursor != trailer;
        }

        public E next() {
            if (!hasNext()) throw new NoSuchElementException();
            recent = cursor;
            cursor = cursor.getNext();
            canRemove = true;
            return recent.getElement();
        }

        public void remove() {
            if (!canRemove) throw new IllegalStateException("Must call next() before remove()");
            Node<E> pred = recent.getPrev();
            Node<E> succ = recent.getNext();
            pred.setNext(succ);
            succ.setPrev(pred);
            size--;
            // clean up
            recent.setElement(null);
            recent.setNext(null);
            recent.setPrev(null);
            recent = null;
            canRemove = false;
        }
    }

    public Iterator<E> iterator() {
        return new PositionIterator();
    }
}

public class ItineraryManager {
    public static void main(String[] args) {
        LinkedPositionalList<String> itinerary = new LinkedPositionalList<>();

        // Add initial stops
        var paris = itinerary.addLast("Eiffel Tower");
        itinerary.addLast("Louvre Museum");
        itinerary.addLast("Notre Dame");

        // Insert a stop after Eiffel Tower
        itinerary.addAfter(paris, "Seine River Cruise");

        // Insert a stop before Louvre
        var louvre = itinerary.after(paris); // louvre position
        itinerary.addBefore(louvre, "Arc de Triomphe");

        // Print itinerary using for-each (iterator)
        System.out.println("Final Travel Itinerary:");
        for (String stop : itinerary) {
            System.out.println("- " + stop);
        }
    }
}
